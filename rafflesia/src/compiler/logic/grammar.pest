identifier              = { (ASCII_DIGIT ~ ASCII_ALPHANUMERIC*) }

outer_statements        = { (outer_statement ~ NEWLINE+)* }
outer_statement         = { variable_declaration | list_declaration | map_declaration | event }

list_declaration        = { "list" ~ "<" ~ primitive_types ~ ">" }
map_declaration         = { "map" ~ "<" ~ primitive_types ~ ">" ~ identifier }
variable_declaration    = { primitive_types ~ identifier ~ ("=" ~ expression)? }

primitive_types         = _{ "number" | "string" }

event                   = { identifier ~ ("." ~ identifier)? ~ "{" ~ inner_statements ~ "}" }

inner_statements        = { (NEWLINE+ ~ inner_statement ~ NEWLINE+)* ~ NEWLINE* }
inner_statement         = { simple_statement | compound_statement }

simple_statement       = { variable_assignment | "break" | "continue" }

compound_statement     = { if_statement | repeat_statement | forever_statement }

variable_assignment     = { identifier ~ "=" ~ expression }

if_statement            = {
                            "if" ~ expression ~ "{" ~ inner_statements ~ "}" ~
                            ("else" ~ "{" ~ inner_statements ~ "}")?
                          }

repeat_statement        = { "repeat" ~ expression ~ "{" ~ inner_statements ~ "}" }

forever_statement       = { "forever" ~ "{" ~ inner_statements ~ "}" }

expression              = { boolean_expression }

boolean_expression      = { comparison_expression ~ (("&&" | "||") ~ comparison_expression)* }

comparison_expression   = {
                            "!" ~ comparison_expression |
                            arithmetic_expression ~ ((">" | "<" | "==" | ">=" | "<=") ~ arithmetic_expression)*
                          }

arithmetic_expression   = { term ~ (("+" | "-") ~ term)* }

term                    = { factor ~ (("+" | "-") ~ factor)* }

factor                  = { "+" ~ factor | "_" ~ factor | power }

power                   = { primary ~ "**" ~ factor | primary }

primary                 = { identifier ~ (("(" ~ arguments? ~ ")" ) | ("[" ~ expression ~ "]")) | atom }

// primary                 = { primary ~ "." ~ identifier |
//                           primary ~ "(" ~ arguments? ~ ")" |
//                           primary ~ "[" ~ expression ~ "]" |
//                           atom }

arguments               = { expression ~ ("," ~ expression)* ~ ","? } // trailing comma

atom                    = { identifier | "true" | "false" | "null" | string | ASCII_DIGIT }

string                  = { "\"" ~ ANY* ~ "\"" }